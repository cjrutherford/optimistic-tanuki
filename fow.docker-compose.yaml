services:
  postgres:
    image: postgres:latest
    restart: always
    container_name: db # Changed back from ot_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  db-setup:
    image: node:lts-alpine
    container_name: db-setup
    working_dir: /workspace
    volumes:
      - .:/workspace
    environment:
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: /bin/sh -c "apk add --no-cache postgresql-client && npm run db:setup"
    restart: "no"

  authentication:
    container_name: ot_authentication
    build:
      context: .
      dockerfile: ./apps/authentication/Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      db-setup: # Ensures db-setup is completed before starting authentication
        condition: service_completed_successfully
    # Command will be inherited from Dockerfile\'s CMD

  forgeofwill:
    container_name: ot_client_interface # Added
    build:
      context: .
      dockerfile: ./apps/forgeofwill/Dockerfile
    ports:
      - "8080:4000" # Changed from 8080:80
    # Command will be inherited from Dockerfile's CMD (now a Node.js server)
    # depends_on: # Add if it needs gateway or other services to be up first for production

  gateway:
    container_name: ot_gateway
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      postgres: # Ensures postgres (db) is healthy
        condition: service_healthy
      authentication:
        condition: service_started
      forgeofwill: # Added
        condition: service_started # Added
      profile:
        condition: service_started
      social:
        condition: service_started
      # tasks:
      #   condition: service_started
    # Command will be inherited from Dockerfile's CMD

  profile:
    container_name: ot_profile
    build:
      context: .
      dockerfile: ./apps/profile/Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      db-setup: # Ensures db-setup is completed before starting profile
        condition: service_completed_successfully
    # Command will be inherited from Dockerfile\'s CMD
  project-planning:
    container_name: ot_project_planning
    build:
      context: .
      dockerfile: ./apps/project-planning/Dockerfile
    ports:
      - "3006:3006"
    depends_on:
      postgres:
        condition: service_healthy
      db-setup: # Ensures db-setup is completed before starting profile
        condition: service_completed_successfully
  
  social:
    container_name: ot_social
    build:
      context: .
      dockerfile: ./apps/social/Dockerfile
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      db-setup: # Ensures db-setup is completed before starting social
        condition: service_completed_successfully
    # Command will be inherited from Dockerfile\'s CMD

  # tasks:
  #   container_name: ot_tasks
  #   build:
  #     context: .
  #     dockerfile: ./apps/tasks/Dockerfile
  #   ports:
  #     - "3004:3004"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     db-setup: # Ensures db-setup is completed before starting tasks
  #       condition: service_completed_successfully
  #   # Command will be inherited from Dockerfile\'s CMD
  
  assets:
    container_name: ot_assets
    build:
      context: .
      dockerfile: ./apps/assets/Dockerfile
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
      db-setup: # Ensures db-setup is completed before starting asset
        condition: service_completed_successfully
    # Command will be inherited from Dockerfile\'s CMD

volumes:
  postgres_data:
